// Handle settings application
browser.runtime.onMessage.addListener(async (message: { type: string; settings?: any }) => {
  if (message.type === 'BACKUP_PROFILE') {
    try {
      // Get current settings from storage
      const result = await browser.storage.local.get();
      return { success: true, data: result };
    } catch (error) {
      return { success: false, error: (error as Error).message };
    }
  }
  
  if (message.type === 'APPLY_SETTINGS') {
    try {
      const { settings } = message;
      // Save settings to storage
      await browser.storage.local.set(settings);
      
      // Create user.js content
      let userJsContent = '// Firefox configuration\n// Generated by Firefox Configurator\n\n';
      for (const [key, value] of Object.entries(settings)) {
        userJsContent += `user_pref("${key}", ${JSON.stringify(value)});\n`;
      }

      // Create a blob and download URL
      const blob = new Blob([userJsContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      // Trigger download
      await browser.downloads.download({
        url: url,
        filename: 'user.js',
        saveAs: true
      });
      
      URL.revokeObjectURL(url);
      return { success: true };
    } catch (error) {
      return { success: false, error: (error as Error).message };
    }
  }
});